/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run nf-core/phoenix -profile test,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

includeConfig 'juno_resources.config'

process {
  beforeScript = "module load singularity/3.7.1; unset R_LIBS; catch_term () { echo 'caught USR2/TERM signal'; set +e; false; on_exit ; } ; trap catch_term USR2 TERM"
  maxRetries = 3

  singularity.cacheDir = "/juno/work/ci/dev/dev_phoenix/singularity_cachedir"

 // executor = "lsf"
//  clusterOptions = "-sla CMOVOYAGER"
//  queueSize = 500
//  perJobMemLimit = true
}

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = '6.GB'
    max_time   = '6.h'

    // Genome references
    genome = "GRCh37"
    assay = "IMPACT468"
    raw_input_workflow_version = "stand-alone"
    fasta = "${genome_resources.genomes[ params.genome ][ 'fasta' ]}"
    fasta_index_dict = "${fasta.replaceAll('fasta$','dict')}"
    fasta_index = ["${fasta}.fai","${fasta}.amb","${fasta}.ann","${fasta}.bwt","${fasta}.pac","${fasta}.sa","${fasta_index_dict}"]
    assay_coverage_info = {}
    impact_complex_nn = 0.2
    impact_complex_tn = 0.5
    default_complex_nn = 0.1
    default_complex_tn = 0.2
    intervals = []
    bed_file = "${genome_resources.targets[params.assay]['baits_bed']}"
    curated_bam_path = "${genome_resources.curated_bams[params.assay]}"
    exac_filter = "${genome_resources.resources.exac_filter}"
    exac_filter_index = "${exac_filter}.tbi"
    dbsnp = "${genome_resources.genomes[params.genome]['dbsnp']}"
    cosmic = "${genome_resources.genomes[params.genome]['cosmic']}"
    hotspot = "${genome_resources.resources.hotspot}"
    impact_gene_list = "${genome_resources.resources.impact_gene_list}"
}

params.intervals = genome_resources.genomes[params.genome]['intervals']
params.assay_coverage_info = genome_resources.assay_coverage
